{% extends 'base.twig' %}

{% block content %}
<div class="question-container" id="question-container">
  <div class="muted">Pergunta {{ number }} de {{ total }}</div>
  <h1>{{ question.title }}</h1>

  <form method="post" action="{{ nextPost }}" autocomplete="off" id="question-form">
    <div class="options">
      {% for opt in question.options %}
        <label>
          <input type="radio" name="answer" value="{{ opt.id }}"> {{ opt.text }}
        </label>
      {% endfor %}
    </div>

    <div class="row">
      <button class="primary" id="submit-btn" disabled>Responder</button>
    </div>
  </form>
</div>

{% endblock %}

{% block scripts %}
<script>
document.addEventListener('DOMContentLoaded', function() {
  const form = document.getElementById('question-form');
  const submitBtn = document.getElementById('submit-btn');
  const radioButtons = document.querySelectorAll('input[type="radio"]');
  const container = document.getElementById('question-container');
  
  // Clear any pre-selected radio buttons
  radioButtons.forEach(rb => rb.checked = false);
  submitBtn.disabled = true;

  // Enable/disable button based on selection
  radioButtons.forEach(rb => {
    rb.addEventListener('change', function() {
      const anySelected = Array.from(radioButtons).some(rb => rb.checked);
      submitBtn.disabled = !anySelected;
    });
  });

  // Handle form submission with AJAX (SPA behavior)
  form.addEventListener('submit', function(e) {
    e.preventDefault();
    
    const selectedAnswer = form.querySelector('input[name="answer"]:checked');
    if (!selectedAnswer) return;
    
    // Disable form during submission
    submitBtn.disabled = true;
    submitBtn.style.opacity = '0.7';
    
    // Submit form with AJAX immediately
    const formData = new FormData(form);
    
    fetch(form.action, {
      method: 'POST',
      body: formData,
      headers: {
        'X-Requested-With': 'XMLHttpRequest'
      }
    })
    .then(response => {
      if (response.redirected) {
        // Follow redirect to next question or end page
        const redirectUrl = response.url;
        if (redirectUrl.includes('/end')) {
          // If redirecting to end page, do full page reload
          window.location.href = redirectUrl;
          return;
        }
        return fetch(redirectUrl, {
          method: 'GET',
          headers: {
            'X-Requested-With': 'XMLHttpRequest'
          }
        }).then(res => res.text());
      } else if (response.ok) {
        return response.text();
      } else {
        throw new Error('Network response was not ok');
      }
    })
    .then(html => {
      if (html) {
        // Update the page content without reload
        document.body.innerHTML = html;
        // Re-initialize the form handlers
        initializeForm();
      }
    })
    .catch(error => {
      console.error('Error:', error);
      // Re-enable form on error
      submitBtn.disabled = false;
      submitBtn.style.opacity = '1';
    });
  });
  
  function initializeForm() {
    const newForm = document.getElementById('question-form');
    const newSubmitBtn = document.getElementById('submit-btn');
    const newRadioButtons = document.querySelectorAll('input[type="radio"]');
    const newContainer = document.getElementById('question-container');
    
    if (newContainer) {
      newContainer.classList.add('fade-in');
    }
    
    // Clear any pre-selected radio buttons
    newRadioButtons.forEach(rb => rb.checked = false);
    newSubmitBtn.disabled = true;
    
    // Enable/disable button based on selection
    newRadioButtons.forEach(rb => {
      rb.addEventListener('change', function() {
        const anySelected = Array.from(newRadioButtons).some(rb => rb.checked);
        newSubmitBtn.disabled = !anySelected;
      });
    });
    
    // Re-attach form submission handler
    newForm.addEventListener('submit', function(e) {
      e.preventDefault();
      
      const selectedAnswer = newForm.querySelector('input[name="answer"]:checked');
      if (!selectedAnswer) return;
      
      // Disable form during submission
      newSubmitBtn.disabled = true;
      newSubmitBtn.style.opacity = '0.7';
      
      // Submit form with AJAX immediately
      const formData = new FormData(newForm);
      
      fetch(newForm.action, {
        method: 'POST',
        body: formData,
        headers: {
          'X-Requested-With': 'XMLHttpRequest'
        }
      })
      .then(response => {
        if (response.redirected) {
          // Follow redirect to next question or end page
          const redirectUrl = response.url;
          if (redirectUrl.includes('/end')) {
            // If redirecting to end page, do full page reload
            window.location.href = redirectUrl;
            return;
          }
          return fetch(redirectUrl, {
            method: 'GET',
            headers: {
              'X-Requested-With': 'XMLHttpRequest'
            }
          }).then(res => res.text());
        } else if (response.ok) {
          return response.text();
        } else {
          throw new Error('Network response was not ok');
        }
      })
      .then(html => {
        if (html) {
          // Update the page content without reload
          document.body.innerHTML = html;
          // Re-initialize the form handlers
          initializeForm();
        }
      })
      .catch(error => {
        console.error('Error:', error);
        // Re-enable form on error
        newSubmitBtn.disabled = false;
        newSubmitBtn.style.opacity = '1';
      });
    });
  }
});
</script>
{% endblock %}
