{% extends 'base.twig' %}

{% block content %}
<div class="question-container" id="question-container">
  <div class="muted">Pergunta {{ number }} de {{ total }}</div>
  <h1>{{ question.title }}</h1>

  <form method="post" action="{{ nextPost }}" autocomplete="off" id="question-form">
    <div class="options">
      {% for opt in question.options %}
        <label>
          <input type="radio" name="answer" value="{{ opt.id }}"> {{ opt.text }}
        </label>
      {% endfor %}
    </div>

    <div class="row">
      {% if prevLink %}
        <a href="{{ prevLink }}">Anterior</a>
      {% endif %}
      <a href="/restart">Reiniciar</a>
      <button class="primary" id="submit-btn" disabled>Responder</button>
    </div>
  </form>
</div>

{% endblock %}

{% block scripts %}
<script>
  try {
    var navEntries = performance.getEntriesByType && performance.getEntriesByType('navigation');
    if (navEntries && navEntries.length && navEntries[0].type === 'reload') {
      window.location.replace('/q/1');
    }
  } catch (e) {}

  if (window.performance && window.performance.navigation && window.performance.navigation.type === 2) {
  }

  (function() {
    const form = document.getElementById('question-form');
    const submitBtn = document.getElementById('submit-btn');
    const radioButtons = Array.from(form.querySelectorAll('input[type="radio"]'));
    const container = document.getElementById('question-container');

    // Add fade-in effect on page load
    container.classList.add('fade-in');

    // Clear any pre-selected radio buttons
    radioButtons.forEach(rb => rb.checked = false);
    submitBtn.disabled = true;

    function updateButton() {
      const anySelected = radioButtons.some(rb => rb.checked);
      submitBtn.disabled = !anySelected;
    }

    radioButtons.forEach(rb => rb.addEventListener('change', updateButton));

    // Handle form submission with AJAX
    form.addEventListener('submit', function(e) {
      e.preventDefault();
      
      const selectedAnswer = form.querySelector('input[name="answer"]:checked');
      
      if (!selectedAnswer) return;
      
      // Disable form during submission
      submitBtn.disabled = true;
      submitBtn.textContent = 'Carregando...';
      submitBtn.style.opacity = '0.7';
      
      // Add fade out effect
      container.classList.add('fade-out');
      
      // Submit form data after fade out
      setTimeout(() => {
        const formData = new FormData(form);
        
        fetch(form.action, {
          method: 'POST',
          body: formData,
          headers: {
            'X-Requested-With': 'XMLHttpRequest'
          }
        })
        .then(response => {
          if (response.redirected) {
            // Navigate to the next question without full page reload
            window.location.href = response.url;
          } else if (response.ok) {
            // If response is OK, get the new content
            return response.text();
          } else {
            throw new Error('Network response was not ok');
          }
        })
        .then(html => {
          if (html) {
            // Update the page content
            document.body.innerHTML = html;
            // Re-initialize the form handlers
            initializeForm();
          }
        })
        .catch(error => {
          console.error('Error:', error);
          // Re-enable form on error
          submitBtn.disabled = false;
          submitBtn.textContent = 'Responder';
          submitBtn.style.opacity = '1';
          container.classList.remove('fade-out');
        });
      }, 300);
    });
    
    function initializeForm() {
      const newForm = document.getElementById('question-form');
      const newSubmitBtn = document.getElementById('submit-btn');
      const newRadioButtons = Array.from(newForm.querySelectorAll('input[type="radio"]'));
      const newContainer = document.getElementById('question-container');
      
      if (newContainer) {
        newContainer.classList.add('fade-in');
      }
      
      // Clear any pre-selected radio buttons
      newRadioButtons.forEach(rb => rb.checked = false);
      newSubmitBtn.disabled = true;
      
      function updateButton() {
        const anySelected = newRadioButtons.some(rb => rb.checked);
        newSubmitBtn.disabled = !anySelected;
      }
      
      newRadioButtons.forEach(rb => rb.addEventListener('change', updateButton));
    }
  })();
</script>

{% endblock %}
